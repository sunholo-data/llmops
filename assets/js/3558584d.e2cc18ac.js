"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7607],{6621:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(4848),o=t(8453);const r={},i="LanceDB",s={id:"integrations/lancedb",title:"LanceDB",description:"If using LanceDB for your vector store, you can set using the config:",source:"@site/docs/integrations/lancedb.md",sourceDirName:"integrations",slug:"/integrations/lancedb",permalink:"/docs/integrations/lancedb",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/integrations/lancedb.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cloudlogging",permalink:"/docs/integrations/cloudlogging"},next:{title:"langchain",permalink:"/docs/integrations/langchain"}},c={},d=[{value:"Retrieval",id:"retrieval",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"lancedb",children:"LanceDB"}),"\n",(0,a.jsx)(n.p,{children:"If using LanceDB for your vector store, you can set using the config:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"kind: vacConfig\napiVersion: v1\nvac:\n  edmonbrain:\n    llm: openai\n    agent: edmonbrain\n    display_name: Edmonbrain\n    avatar_url: https://avatars.githubusercontent.com/u/3155884?s=48&v=4\n    description: This is the original [Edmonbrain](https://code.markedmondson.me/running-llms-on-gcp/) implementation that uses RAG to answer questions based on data you send in via its `!help` commands and learns from previous chat history.  It dreams each night that can also be used in its memory.\n    model: gpt-4o\n    memory:\n      - lancedb-vectorstore:\n          vectorstore: lancedb\n          provider: LanceDB\n"})}),"\n",(0,a.jsx)(n.p,{children:"LanceDB will then be used as the vector store destination from both documents added to the bucket and for queries."}),"\n",(0,a.jsxs)(n.p,{children:["To speed up queries, use ",(0,a.jsx)(n.code,{children:"create_lancedb_index()"})," to run periodically and update the index.  An example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from sunholo.database.lancedb import create_lancedb_index\ncreate_lancedb_index('gs://lancedb-bucket', 'your-vac') \n"})}),"\n",(0,a.jsxs)(n.p,{children:["This can be put into a Dockerfile during a build, as ",(0,a.jsx)(n.code,{children:"_LANCEDB_BUCKET"})," is a supported env variable."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dockerfile",children:"RUN python -c \"from sunholo.database.lancedb import create_lancedb_index; create_lancedb_index('${_LANCEDB_BUCKET}', 'edmonbrain')\" \n"})}),"\n",(0,a.jsx)(n.h2,{id:"retrieval",children:"Retrieval"}),"\n",(0,a.jsxs)(n.p,{children:["To use within VACs, ensure you have the env var ",(0,a.jsx)(n.code,{children:"LANCEDB_BUCKET"})," set to where the database is stored.  This can be imported during a build via:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dockerfile",children:"ENV LANCEDB_BUCKET=${_LANCEDB_BUCKET}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(6540);const o={},r=a.createContext(o);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);