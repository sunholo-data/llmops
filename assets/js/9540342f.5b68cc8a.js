"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5952],{3211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var o=t(4848),i=t(8453);const l={},s="config.py",r={id:"sunholo/utils/config",title:"config.py",description:"Source: sunholo/utils/config.py",source:"@site/docs/sunholo/utils/config.md",sourceDirName:"sunholo/utils",slug:"/sunholo/utils/config",permalink:"/docs/sunholo/utils/config",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/sunholo/utils/config.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"langserve.py",permalink:"/docs/sunholo/streaming/langserve"},next:{title:"gcp.py",permalink:"/docs/sunholo/utils/gcp"}},a={},c=[{value:"Functions",id:"functions",level:2},{value:"load_config_key(key: str, vector_name: str, filename: str = None)",id:"load_config_keykey-str-vector_name-str-filename-str--none",level:3},{value:"load_config(filename: str = None) -&gt; tuple[dict, str]",id:"load_configfilename-str--none---tupledict-str",level:3},{value:"get_module_filepath(filepath: str)",id:"get_module_filepathfilepath-str",level:3},{value:"fetch_config(bucket_name: str, blob_name: str)",id:"fetch_configbucket_name-str-blob_name-str",level:3}];function f(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"configpy",children:"config.py"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Source"}),": ",(0,o.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/sunholo/utils/config.py",children:"sunholo/utils/config.py"})]}),"\n",(0,o.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,o.jsx)(n.h3,{id:"load_config_keykey-str-vector_name-str-filename-str--none",children:"load_config_key(key: str, vector_name: str, filename: str = None)"}),"\n",(0,o.jsx)(n.p,{children:"Load a specific key from a configuration file."}),"\n",(0,o.jsxs)(n.p,{children:["Args:\nkey (str): The key to fetch from the configuration.\nvector_name (str): The name of the vector in the configuration file.\nfilename (str, optional): The configuration file name. Defaults to the ",(0,o.jsx)(n.code,{children:"_CONFIG_FILE"})," environment variable."]}),"\n",(0,o.jsx)(n.p,{children:"Returns:\nstr: The value associated with the specified key."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"api_url = load_config_key('apiUrl', 'myVector', 'config.yaml')\nprint(f'API URL: {api_url}')\n"})}),"\n",(0,o.jsx)(n.h3,{id:"load_configfilename-str--none---tupledict-str",children:"load_config(filename: str = None) -> tuple[dict, str]"}),"\n",(0,o.jsxs)(n.p,{children:["Load configuration from a yaml or json file.\nWill look relative to ",(0,o.jsx)(n.code,{children:"_CONFIG_FOLDER"})," environment variable if available, else current directory."]}),"\n",(0,o.jsxs)(n.p,{children:["Args:\nfilename (str, optional): The name of the configuration file. Defaults to the ",(0,o.jsx)(n.code,{children:"_CONFIG_FILE"})," environment variable."]}),"\n",(0,o.jsx)(n.p,{children:"Returns:\ntuple[dict, str]: The configuration as a dictionary and the derived absolute filename."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"config, filename = load_config('config.yaml')\nprint(f'Config: {config}')\nprint(f'Loaded from file: {filename}')\n"})}),"\n",(0,o.jsx)(n.h3,{id:"get_module_filepathfilepath-str",children:"get_module_filepath(filepath: str)"}),"\n",(0,o.jsx)(n.p,{children:"Get the absolute path of a module file based on its relative path."}),"\n",(0,o.jsx)(n.p,{children:"Args:\nfilepath (str): The relative path of the file."}),"\n",(0,o.jsx)(n.p,{children:"Returns:\nstr: The absolute file path."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"abs_path = get_module_filepath('config/config.yaml')\nprint(f'Absolute path: {abs_path}')\n"})}),"\n",(0,o.jsx)(n.h3,{id:"fetch_configbucket_name-str-blob_name-str",children:"fetch_config(bucket_name: str, blob_name: str)"}),"\n",(0,o.jsx)(n.p,{children:"Fetch the configuration file from a Google Cloud Storage bucket."}),"\n",(0,o.jsx)(n.p,{children:"Args:\nbucket_name (str): The name of the GCS bucket.\nblob_name (str): The name of the blob/file to fetch."}),"\n",(0,o.jsx)(n.p,{children:"Returns:\ndatetime or None: The last modified time of the file, or None if the blob does not exist."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"last_updated = fetch_config('my-bucket', 'config.yaml')\nif last_updated:\n    print(f'Configuration file was last updated on {last_updated}')\nelse:\n    print('Configuration file not found in the specified bucket.')\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const i={},l=o.createContext(i);function s(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);