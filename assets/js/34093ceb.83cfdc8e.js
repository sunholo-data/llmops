"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4760],{223:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>h,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=t(4848),a=t(8453);const r={},o="dispatch_to_qa.py",i={id:"sunholo/agents/dispatch_to_qa",title:"dispatch_to_qa.py",description:"Source: sunholo/agents/dispatchtoqa.py",source:"@site/docs/sunholo/agents/dispatch_to_qa.md",sourceDirName:"sunholo/agents",slug:"/sunholo/agents/dispatch_to_qa",permalink:"/docs/sunholo/agents/dispatch_to_qa",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/sunholo/agents/dispatch_to_qa.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"chat_history.py",permalink:"/docs/sunholo/agents/chat_history"},next:{title:"base.py",permalink:"/docs/sunholo/agents/fastapi/base"}},h={},d=[{value:"Functions",id:"functions",level:2},{value:"send_to_qa(user_input, vector_name, chat_history, stream=False, **kwargs)",id:"send_to_qauser_input-vector_name-chat_history-streamfalse-kwargs",level:3},{value:"send_to_qa_async(user_input, vector_name, chat_history, stream=False, **kwargs)",id:"send_to_qa_asyncuser_input-vector_name-chat_history-streamfalse-kwargs",level:3},{value:"add_header_ids(header, **kwargs)",id:"add_header_idsheader-kwargs",level:3},{value:"add_langfuse_trace(qna_endpoint)",id:"add_langfuse_traceqna_endpoint",level:3},{value:"prep_request_payload(user_input, chat_history, vector_name, stream, **kwargs)",id:"prep_request_payloaduser_input-chat_history-vector_name-stream-kwargs",level:3}];function c(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"dispatch_to_qapy",children:"dispatch_to_qa.py"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"Source"}),": ",(0,n.jsx)(s.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/sunholo/agents/dispatch_to_qa.py",children:"sunholo/agents/dispatch_to_qa.py"})]}),"\n",(0,n.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,n.jsx)(s.h3,{id:"send_to_qauser_input-vector_name-chat_history-streamfalse-kwargs",children:"send_to_qa(user_input, vector_name, chat_history, stream=False, **kwargs)"}),"\n",(0,n.jsx)(s.p,{children:"Sends a query to the QA system synchronously."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nuser_input (str): The user's input query.\nvector_name (str): The name of the vector.\nchat_history (list): The history of previous chat messages.\nstream (bool): Whether to stream the response.\n**kwargs: Additional key-value pairs for request data."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nUnion[dict, generator]: The response from the QA system, either as a JSON object or as a generator for streaming."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"response = send_to_qa(\"What is AI?\", \"my_vector\", [])\nprint(response)\n# Output: {'answer': 'The definition of AI is ...'}\n"})}),"\n",(0,n.jsx)(s.h3,{id:"send_to_qa_asyncuser_input-vector_name-chat_history-streamfalse-kwargs",children:"send_to_qa_async(user_input, vector_name, chat_history, stream=False, **kwargs)"}),"\n",(0,n.jsx)(s.p,{children:"Sends a query to the QA system asynchronously."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nuser_input (str): The user's input query.\nvector_name (str): The name of the vector.\nchat_history (list): The history of previous chat messages.\nstream (bool): Whether to stream the response.\n**kwargs: Additional key-value pairs for request data."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\ngenerator: A generator that yields chunks of the streamed response or the entire response."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'async def example_async_query():\n    async for response_chunk in send_to_qa_async("What is AI?", "my_vector", []):\n        print(response_chunk)\n'})}),"\n",(0,n.jsx)(s.h3,{id:"add_header_idsheader-kwargs",children:"add_header_ids(header, **kwargs)"}),"\n",(0,n.jsx)(s.p,{children:"Adds user and session IDs to the request header if they are provided."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nheader (dict): The original request header.\n**kwargs: Additional key-value pairs for header data."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\ndict: The updated header."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"header = {\"Authorization\": \"Bearer some_token\"}\nupdated_header = add_header_ids(header, user_id=\"user_123\", session_id=\"session_456\")\nprint(updated_header)\n# Output: {'Authorization': 'Bearer some_token', 'X-User-ID': 'user_123', 'X-Session-ID': 'session_456'}\n"})}),"\n",(0,n.jsx)(s.h3,{id:"add_langfuse_traceqna_endpoint",children:"add_langfuse_trace(qna_endpoint)"}),"\n",(0,n.jsx)(s.p,{children:"No docstring available."}),"\n",(0,n.jsx)(s.h3,{id:"prep_request_payloaduser_input-chat_history-vector_name-stream-kwargs",children:"prep_request_payload(user_input, chat_history, vector_name, stream, **kwargs)"}),"\n",(0,n.jsx)(s.p,{children:"Prepares the request payload for sending a query to the QA system."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nuser_input (str): The user's input query.\nchat_history (list): The history of previous chat messages.\nvector_name (str): The name of the vector.\nstream (bool): Whether the request will be streamed.\n**kwargs: Additional key-value pairs for request data."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\ntuple: The endpoint URL and the prepared data payload."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"user_input = \"What is AI?\"\nchat_history = []\nvector_name = \"my_vector\"\nstream = False\nendpoint, payload = prep_request_payload(user_input, chat_history, vector_name, stream)\nprint(endpoint, payload)\n# Output: 'http://example.com/invoke' {'user_input': 'What is AI?', 'chat_history': []}\n"})})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(6540);const a={},r=n.createContext(a);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);