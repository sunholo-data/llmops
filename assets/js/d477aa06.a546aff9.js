"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[721],{4743:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var t=s(4848),a=s(8453);const r={sidebar_position:2,slug:"/function-reference"},i="Function Reference",o={id:"functions",title:"Function Reference",description:"Below is a function reference generated from the docstrings of the functions within the sunholo module",source:"@site/docs/functions.md",sourceDirName:".",slug:"/function-reference",permalink:"/docs/function-reference",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/functions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/function-reference"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/"}},c={},l=[{value:"create_fastapi_app()",id:"create_fastapi_app",level:2},{value:"prepare_request_data()",id:"prepare_request_data",level:2},{value:"create_fastapi_app()",id:"create_fastapi_app-1",level:2},{value:"fetch_input_schema()",id:"fetch_input_schema",level:2},{value:"prepare_request_data()",id:"prepare_request_data-1",level:2},{value:"get_id_token()",id:"get_id_token",level:2},{value:"data_to_embed_pubsub()",id:"data_to_embed_pubsub",level:2},{value:"ignore_files()",id:"ignore_files",level:2},{value:"chunk_doc_to_docs()",id:"chunk_doc_to_docs",level:2},{value:"publish_if_urls()",id:"publish_if_urls",level:2},{value:"publish_if_urls()",id:"publish_if_urls-1",level:2},{value:"chunk_doc_to_docs()",id:"chunk_doc_to_docs-1",level:2},{value:"pick_prompt()",id:"pick_prompt",level:2},{value:"pick_prompt()",id:"pick_prompt-1",level:2},{value:"delete_sources_from_alloydb()",id:"delete_sources_from_alloydb",level:2},{value:"embed_pubsub_chunk()",id:"embed_pubsub_chunk",level:2},{value:"embed_pubsub_chunk()",id:"embed_pubsub_chunk-1",level:2},{value:"construct_download_link()",id:"construct_download_link",level:2},{value:"construct_download_link()",id:"construct_download_link-1",level:2},{value:"construct_download_link_simple()",id:"construct_download_link_simple",level:2},{value:"parse_gs_uri()",id:"parse_gs_uri",level:2},{value:"add_langfuse_tracing()",id:"add_langfuse_tracing",level:2},{value:"process_pubsub_message()",id:"process_pubsub_message",level:2},{value:"process_pubsub_message()",id:"process_pubsub_message-1",level:2},{value:"parse_langserve_token()",id:"parse_langserve_token",level:2},{value:"parse_langserve_token_async()",id:"parse_langserve_token_async",level:2},{value:"accumulate_json_lines()",id:"accumulate_json_lines",level:2},{value:"parse_json_data()",id:"parse_json_data",level:2},{value:"parse_langserve_token()",id:"parse_langserve_token-1",level:2},{value:"parse_langserve_token_async()",id:"parse_langserve_token_async-1",level:2},{value:"process_langserve_lines()",id:"process_langserve_lines",level:2},{value:"process_langserve_lines_async()",id:"process_langserve_lines_async",level:2},{value:"parse_langserve_token()",id:"parse_langserve_token-2",level:2},{value:"parse_langserve_token_async()",id:"parse_langserve_token_async-2",level:2},{value:"get_env_project_id()",id:"get_env_project_id",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",p:"p",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"function-reference",children:"Function Reference"}),"\n",(0,t.jsx)(n.p,{children:"Below is a function reference generated from the docstrings of the functions within the sunholo module"}),"\n",(0,t.jsx)(n.h2,{id:"create_fastapi_app",children:"create_fastapi_app()"}),"\n",(0,t.jsx)(n.p,{children:"Creates and configures a FastAPI app for image-based Q&A with Socket.IO integration."}),"\n",(0,t.jsx)(n.p,{children:"Args:\nimage_qna_stream_fn: Streaming Q&A function (likely from gemini.genai)\nimage_qna_fn: Non-streaming Q&A function (likely from gemini.genai)"}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nFastAPI: The configured FastAPI app instance."}),"\n",(0,t.jsx)(n.h2,{id:"prepare_request_data",children:"prepare_request_data()"}),"\n",(0,t.jsx)(n.p,{children:"Prepare the request data based on the input schema from the endpoint.\nAdditional data can be passed via kwargs."}),"\n",(0,t.jsx)(n.h2,{id:"create_fastapi_app-1",children:"create_fastapi_app()"}),"\n",(0,t.jsx)(n.p,{children:"Creates and configures a FastAPI app for image-based Q&A with Socket.IO integration."}),"\n",(0,t.jsx)(n.p,{children:"Args:\nimage_qna_stream_fn: Streaming Q&A function (likely from gemini.genai)\nimage_qna_fn: Non-streaming Q&A function (likely from gemini.genai)"}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nFastAPI: The configured FastAPI app instance."}),"\n",(0,t.jsx)(n.h2,{id:"fetch_input_schema",children:"fetch_input_schema()"}),"\n",(0,t.jsx)(n.p,{children:"Fetch the input schema from the endpoint, with caching"}),"\n",(0,t.jsx)(n.h2,{id:"prepare_request_data-1",children:"prepare_request_data()"}),"\n",(0,t.jsx)(n.p,{children:"Prepare the request data based on the input schema from the endpoint.\nAdditional data can be passed via kwargs."}),"\n",(0,t.jsx)(n.h2,{id:"get_id_token",children:"get_id_token()"}),"\n",(0,t.jsx)(n.p,{children:"Helper method to generate ID tokens for authenticated requests"}),"\n",(0,t.jsx)(n.h2,{id:"data_to_embed_pubsub",children:"data_to_embed_pubsub()"}),"\n",(0,t.jsx)(n.p,{children:"Triggered from a message on a Cloud Pub/Sub topic.\nArgs:\ndata JSON"}),"\n",(0,t.jsx)(n.h2,{id:"ignore_files",children:"ignore_files()"}),"\n",(0,t.jsx)(n.p,{children:'Returns True if the given path\'s file extension is found within\nconfig.json "code_extensions" array\nReturns False if not'}),"\n",(0,t.jsx)(n.h2,{id:"chunk_doc_to_docs",children:"chunk_doc_to_docs()"}),"\n",(0,t.jsx)(n.p,{children:"Turns a Document object into a list of many Document chunks.\nIf a document or chunk is smaller than min_size, it will be merged with adjacent documents or chunks."}),"\n",(0,t.jsx)(n.h2,{id:"publish_if_urls",children:"publish_if_urls()"}),"\n",(0,t.jsx)(n.p,{children:"Extracts URLs and puts them in a queue for processing on PubSub"}),"\n",(0,t.jsx)(n.h2,{id:"publish_if_urls-1",children:"publish_if_urls()"}),"\n",(0,t.jsx)(n.p,{children:"Extracts URLs and puts them in a queue for processing on PubSub"}),"\n",(0,t.jsx)(n.h2,{id:"chunk_doc_to_docs-1",children:"chunk_doc_to_docs()"}),"\n",(0,t.jsx)(n.p,{children:"Turns a Document object into a list of many Document chunks.\nIf a document or chunk is smaller than min_size, it will be merged with adjacent documents or chunks."}),"\n",(0,t.jsx)(n.h2,{id:"pick_prompt",children:"pick_prompt()"}),"\n",(0,t.jsx)(n.p,{children:"Pick a custom prompt"}),"\n",(0,t.jsx)(n.h2,{id:"pick_prompt-1",children:"pick_prompt()"}),"\n",(0,t.jsx)(n.p,{children:"Pick a custom prompt"}),"\n",(0,t.jsx)(n.h2,{id:"delete_sources_from_alloydb",children:"delete_sources_from_alloydb()"}),"\n",(0,t.jsx)(n.p,{children:"Deletes from both vectorstroe and docstore"}),"\n",(0,t.jsx)(n.h2,{id:"embed_pubsub_chunk",children:"embed_pubsub_chunk()"}),"\n",(0,t.jsx)(n.p,{children:'Triggered from a message on a Cloud Pub/Sub topic "embed_chunk" topic\nWill only attempt to send one chunk to vectorstore.\nArgs:\ndata JSON'}),"\n",(0,t.jsx)(n.h2,{id:"embed_pubsub_chunk-1",children:"embed_pubsub_chunk()"}),"\n",(0,t.jsx)(n.p,{children:'Triggered from a message on a Cloud Pub/Sub topic "embed_chunk" topic\nWill only attempt to send one chunk to vectorstore.\nArgs:\ndata JSON'}),"\n",(0,t.jsx)(n.h2,{id:"construct_download_link",children:"construct_download_link()"}),"\n",(0,t.jsx)(n.p,{children:"Creates a viewable Cloud Storage web browser link from a gs:// URI."}),"\n",(0,t.jsx)(n.h2,{id:"construct_download_link-1",children:"construct_download_link()"}),"\n",(0,t.jsx)(n.p,{children:"Creates a viewable Cloud Storage web browser link from a gs:// URI."}),"\n",(0,t.jsx)(n.h2,{id:"construct_download_link_simple",children:"construct_download_link_simple()"}),"\n",(0,t.jsx)(n.p,{children:"Creates a viewable Cloud Storage web browser link from a gs:// URI."}),"\n",(0,t.jsx)(n.p,{children:"Args:\nsource_uri: The gs:// URI of the object in Cloud Storage."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nA URL that directly access the object in the Cloud Storage web browser."}),"\n",(0,t.jsx)(n.h2,{id:"parse_gs_uri",children:"parse_gs_uri()"}),"\n",(0,t.jsx)(n.p,{children:"Parses a gs:// URI into the bucket name and object name."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ngs_uri: The gs:// URI to parse."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nA tuple containing the bucket name and object name."}),"\n",(0,t.jsx)(n.h2,{id:"add_langfuse_tracing",children:"add_langfuse_tracing()"}),"\n",(0,t.jsxs)(n.p,{children:["Config modifier function to add a tracing callback\nBy @jmaness ",(0,t.jsx)(n.a,{href:"https://github.com/langchain-ai/langserve/issues/311",children:"https://github.com/langchain-ai/langserve/issues/311"})]}),"\n",(0,t.jsxs)(n.p,{children:[":param"," config: config dict\n",":param"," request: HTTP request\n:return: updated config"]}),"\n",(0,t.jsx)(n.h2,{id:"process_pubsub_message",children:"process_pubsub_message()"}),"\n",(0,t.jsx)(n.p,{children:"Extracts message data and metadata from a Pub/Sub message."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ndata (dict): The Pub/Sub message data."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\ntuple: A tuple containing the message data and attributes as metadata."}),"\n",(0,t.jsx)(n.h2,{id:"process_pubsub_message-1",children:"process_pubsub_message()"}),"\n",(0,t.jsx)(n.p,{children:"Extracts message data and metadata from a Pub/Sub message."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ndata (dict): The Pub/Sub message data."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\ntuple: A tuple containing the message data and attributes as metadata."}),"\n",(0,t.jsx)(n.h2,{id:"parse_langserve_token",children:"parse_langserve_token()"}),"\n",(0,t.jsx)(n.p,{children:"Parses the token to accumulate content from JSON for 'event: data' events,\nhandling JSON strings split between two tokens."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntoken (str or bytes): The token to parse."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nGenerator of str: A generator that yields accumulated contents from 'event: data'."}),"\n",(0,t.jsx)(n.h2,{id:"parse_langserve_token_async",children:"parse_langserve_token_async()"}),"\n",(0,t.jsx)(n.p,{children:"Asynchronously parses the token to accumulate content from JSON for 'event: data' events,\nhandling JSON strings split between two tokens."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntoken (str or bytes): The token to parse."}),"\n",(0,t.jsx)(n.p,{children:"Yields:\nstr: An accumulated content from 'event: data'."}),"\n",(0,t.jsx)(n.h2,{id:"accumulate_json_lines",children:"accumulate_json_lines()"}),"\n",(0,t.jsx)(n.p,{children:"Accumulate and parse JSON string parts from a list of lines starting\nat a given index, using a run_id-based buffer to handle splits across tokens."}),"\n",(0,t.jsxs)(n.p,{children:[":param"," lines: The list of lines containing the JSON data.\n",":param"," start_index: The index to start accumulation from.\n",":param"," run_id: The run_id for the current JSON accumulation.\n:return: The accumulated JSON string if a complete JSON object is formed,\nor None if accumulation should continue."]}),"\n",(0,t.jsx)(n.h2,{id:"parse_json_data",children:"parse_json_data()"}),"\n",(0,t.jsx)(n.p,{children:"Attempt to parse a JSON string and yield the appropriate content or error."}),"\n",(0,t.jsxs)(n.p,{children:[":param"," json_data: The dict string to parse."]}),"\n",(0,t.jsx)(n.p,{children:"yields:\nstr if within content key\ndict if no content key\nstr if error in decoding json"}),"\n",(0,t.jsx)(n.h2,{id:"parse_langserve_token-1",children:"parse_langserve_token()"}),"\n",(0,t.jsx)(n.p,{children:"Parses the token to accumulate content from JSON for 'event: data' events,\nhandling JSON strings split between two tokens."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntoken (str or bytes): The token to parse."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nGenerator of str: A generator that yields accumulated contents from 'event: data'."}),"\n",(0,t.jsx)(n.h2,{id:"parse_langserve_token_async-1",children:"parse_langserve_token_async()"}),"\n",(0,t.jsx)(n.p,{children:"Asynchronously parses the token to accumulate content from JSON for 'event: data' events,\nhandling JSON strings split between two tokens."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntoken (str or bytes): The token to parse."}),"\n",(0,t.jsx)(n.p,{children:"Yields:\nstr: An accumulated content from 'event: data'."}),"\n",(0,t.jsx)(n.h2,{id:"process_langserve_lines",children:"process_langserve_lines()"}),"\n",(0,t.jsx)(n.p,{children:"Process lines from langserve, parsing JSON data as needed."}),"\n",(0,t.jsxs)(n.p,{children:[":param"," lines: The list of lines to process.\n",":param"," run_id: The current run_id to index the accumulation buffer."]}),"\n",(0,t.jsx)(n.h2,{id:"process_langserve_lines_async",children:"process_langserve_lines_async()"}),"\n",(0,t.jsx)(n.p,{children:"Asynchronously process lines from langserve, parsing JSON data as needed.\nThis is an async wrapper for process_langserve_lines to fit into async processing."}),"\n",(0,t.jsxs)(n.p,{children:[":param"," lines: The list of lines to process.\n",":param"," run_id: The current run_id to index the accumulation buffer."]}),"\n",(0,t.jsx)(n.h2,{id:"parse_langserve_token-2",children:"parse_langserve_token()"}),"\n",(0,t.jsx)(n.p,{children:"Parses the token to accumulate content from JSON for 'event: data' events,\nhandling JSON strings split between two tokens."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntoken (str or bytes): The token to parse."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nGenerator of str: A generator that yields accumulated contents from 'event: data'."}),"\n",(0,t.jsx)(n.h2,{id:"parse_langserve_token_async-2",children:"parse_langserve_token_async()"}),"\n",(0,t.jsx)(n.p,{children:"Asynchronously parses the token to accumulate content from JSON for 'event: data' events,\nhandling JSON strings split between two tokens."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntoken (str or bytes): The token to parse."}),"\n",(0,t.jsx)(n.p,{children:"Yields:\nstr: An accumulated content from 'event: data'."}),"\n",(0,t.jsx)(n.h2,{id:"get_env_project_id",children:"get_env_project_id()"}),"\n",(0,t.jsx)(n.p,{children:"Attempts to retrieve the project ID from environment variables."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nstr or None: The project ID if found in environment variables, None otherwise."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);