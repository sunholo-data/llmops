"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5930],{5983:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=t(4848),i=t(8453);const s={},d="Embedding Pipelines",r={id:"howto/embedding",title:"Embedding Pipelines",description:"The configuration files include sections on what vector store will be used upon retrieval for context in a RAG pipeline.",source:"@site/docs/howto/embedding.md",sourceDirName:"howto",slug:"/howto/embedding",permalink:"/docs/howto/embedding",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/howto/embedding.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How To",permalink:"/docs/howto/"},next:{title:"Creating a Flask VAC app",permalink:"/docs/howto/flask_app"}},a={},c=[{value:"Embedding architecture",id:"embedding-architecture",level:2},{value:"Add documents for embedding",id:"add-documents-for-embedding",level:2},{value:"Adding to a bucket",id:"adding-to-a-bucket",level:3},{value:"Using locally via <code>sunholo embed</code>",id:"using-locally-via-sunholo-embed",level:3},{value:"Metadata",id:"metadata",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"embedding-pipelines",children:"Embedding Pipelines"}),"\n",(0,o.jsx)(n.p,{children:"The configuration files include sections on what vector store will be used upon retrieval for context in a RAG pipeline."}),"\n",(0,o.jsx)(n.p,{children:"But to get the documents embedded in the first place is also controlled by the configuration - here is an example from Edmonbrain:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"kind: vacConfig\napiVersion: v1\n  vac:\n    edmonbrain:\n      llm: openai\n      agent: edmonbrain\n      display_name: Edmonbrain\n      avatar_url: https://avatars.githubusercontent.com/u/3155884?s=48&v=4\n      description: This is the original [Edmonbrain](https://code.markedmondson.me/running-llms-on-gcp/) implementation that uses RAG to answer questions based on data you send in via its `!help` commands and learns from previous chat history.  It dreams each night that can also be used in its memory.\n      model: gpt-4o\n      memory_k: 10 # how many memories will be returned in total after relevancy compression\n      memory:\n        - personal-vectorstore:\n            vectorstore: lancedb\n            k: 10 #  how many candidate memory will be returned from this vectorstore\n        - eduvac-vectorstore:\n            vector_name: eduvac\n            read_only: true # can only read, not write embeddings\n            vectorstore: lancedb\n            k: 3 #  how many candidate memory will be returned from this vectorstore\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In the above example two memory stores are defined: ",(0,o.jsx)(n.code,{children:"personal-vectorstore"})," and ",(0,o.jsx)(n.code,{children:"eduvac-vectorstore"}),".  Only those without ",(0,o.jsx)(n.code,{children:"read_only"})," will be used when adding documents, but being able to read from other VAC stores means you can set up knowledge sharing and authentication with differing levels of access, such as company wide, department and personal."]}),"\n",(0,o.jsx)(n.h2,{id:"embedding-architecture",children:"Embedding architecture"}),"\n",(0,o.jsx)(n.p,{children:"Three system VACs are used within most embedding pipelines:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"chunker"})," - parses out files and URLS sent to it and turns them into chunks ready for embedding."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"unstructured"})," - The ",(0,o.jsx)(n.code,{children:"chunker"})," can send files to this self-hosted unstructured.io servie for document parsing"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"emebedder"})," - receives chunks from ",(0,o.jsx)(n.code,{children:"chunker"})," and sends them to the appropriate vector store."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Taking advantage of the micro-service architecture means the pipeline can scale from 0 to many GBs per second of embedding."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"vacConfig"})," can set the attributes of the embedding chunks per VAC:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# chunk size and overlap\n...\n    chunker:\n      chunk_size: 1000\n      overlap: 200\n...\n"})}),"\n",(0,o.jsx)(n.h2,{id:"add-documents-for-embedding",children:"Add documents for embedding"}),"\n",(0,o.jsx)(n.h3,{id:"adding-to-a-bucket",children:"Adding to a bucket"}),"\n",(0,o.jsxs)(n.p,{children:["If using Multivac, then embedding is activated when a file hits the designated cloud storage bucket.  A Pub/Sub notification sends the ",(0,o.jsx)(n.code,{children:"gs://"})," URI to the chunker VAC, which then parses and sends to the other embedding services such as ",(0,o.jsx)(n.code,{children:"unstructured"}),", ",(0,o.jsx)(n.code,{children:"embedder"})," and other document stores if configured."]}),"\n",(0,o.jsxs)(n.p,{children:["The Pub/Sub is also available to call directly, as well as the individual embedding services, for instance you may already have parsed text content and just want to send it to the ",(0,o.jsx)(n.code,{children:"embedder"})," service.  The overall pipeline is pretty quick, usually only taking under a minute to index big documents such as PDFs and PowerPoints, so it can be used in a live user session."]}),"\n",(0,o.jsx)(n.p,{children:"Often for batch pipelines a feeder bucket is used then an hourly Cloud Storage Transfer service will check the bucket for new files and transfer them across."}),"\n",(0,o.jsxs)(n.p,{children:["The folder of the embedding bucket determines the ",(0,o.jsx)(n.code,{children:"VAC"})," the documents are sent to, so for instance all files that land within ",(0,o.jsx)(n.code,{children:"edmonbrain/"})," are sent to the ",(0,o.jsx)(n.code,{children:"edmonbrain"})," vector stores."]}),"\n",(0,o.jsxs)(n.h3,{id:"using-locally-via-sunholo-embed",children:["Using locally via ",(0,o.jsx)(n.code,{children:"sunholo embed"})]}),"\n",(0,o.jsxs)(n.p,{children:["Since the services are available via API, ",(0,o.jsx)(n.code,{children:"curl"})," can also be used to send files to the embedding pipeline, however for convenience its easier to use the ",(0,o.jsx)(n.code,{children:"sunholo"})," cli installed via ",(0,o.jsx)(n.code,{children:"pip install sunholo[cli]"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"usage: sunholo embed [-h] [--embed-override EMBED_OVERRIDE] [--chunk-override CHUNK_OVERRIDE] [--no-proxy] [-m METADATA]\n                     [--local-chunks] [--is-file] [--only-chunk]\n                     vac_name data\n\npositional arguments:\n  vac_name              VAC service to embed the data for\n  data                  String content to send for embedding\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --embed-override EMBED_OVERRIDE\n                        Override the embed VAC service URL.\n  --chunk-override CHUNK_OVERRIDE\n                        Override the chunk VAC service URL.\n  --no-proxy            Do not use the proxy and connect directly to the VAC service.\n  -m METADATA, --metadata METADATA\n                        Metadata to send with the embedding (as JSON string).\n  --local-chunks        Whether to process chunks to embed locally, or via the cloud.\n  --is-file             Indicate if the data argument is a file path\n  --only-chunk          Whether to only parse the document and return the chunks locally, with no embedding\n"})}),"\n",(0,o.jsxs)(n.p,{children:["See the ",(0,o.jsx)(n.a,{href:"../cli/#sunholo-embed",children:(0,o.jsx)(n.code,{children:"sunholo embed"})})," documentation for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,o.jsx)(n.p,{children:"TODO"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var o=t(6540);const i={},s=o.createContext(i);function d(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);