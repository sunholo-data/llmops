"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4833],{1514:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var t=s(4848),i=s(8453);const r={},l="qna_routes.py",a={id:"sunholo/agents/fastapi/qna_routes",title:"qna_routes.py",description:"Source: sunholo/agents/fastapi/qnaroutes.py",source:"@site/docs/sunholo/agents/fastapi/qna_routes.md",sourceDirName:"sunholo/agents/fastapi",slug:"/sunholo/agents/fastapi/qna_routes",permalink:"/docs/sunholo/agents/fastapi/qna_routes",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/sunholo/agents/fastapi/qna_routes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"base.py",permalink:"/docs/sunholo/agents/fastapi/base"},next:{title:"base.py",permalink:"/docs/sunholo/agents/flask/base"}},o={},d=[{value:"Functions",id:"functions",level:2},{value:"register_qna_fastapi_routes(app: fastapi.applications.FastAPI, stream_interpreter, qna_interpreter)",id:"register_qna_fastapi_routesapp-fastapiapplicationsfastapi-stream_interpreter-qna_interpreter",level:3},{value:"register_qna_fastapi_routes(app: fastapi.applications.FastAPI, stream_interpreter, qna_interpreter)",id:"register_qna_fastapi_routesapp-fastapiapplicationsfastapi-stream_interpreter-qna_interpreter-1",level:3},{value:"create_process_qna_endpoint(qna_interpreter)",id:"create_process_qna_endpointqna_interpreter",level:3},{value:"create_stream_qa_endpoint(stream_interpreter)",id:"create_stream_qa_endpointstream_interpreter",level:3},{value:"register_qna_fastapi_routes(app: fastapi.applications.FastAPI, stream_interpreter, qna_interpreter)",id:"register_qna_fastapi_routesapp-fastapiapplicationsfastapi-stream_interpreter-qna_interpreter-2",level:3},{value:"Classes",id:"classes",level:2},{value:"VACRequest",id:"vacrequest",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"qna_routespy",children:"qna_routes.py"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Source"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/sunholo/agents/fastapi/qna_routes.py",children:"sunholo/agents/fastapi/qna_routes.py"})]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"register_qna_fastapi_routesapp-fastapiapplicationsfastapi-stream_interpreter-qna_interpreter",children:"register_qna_fastapi_routes(app: fastapi.applications.FastAPI, stream_interpreter, qna_interpreter)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"register_qna_fastapi_routesapp-fastapiapplicationsfastapi-stream_interpreter-qna_interpreter-1",children:"register_qna_fastapi_routes(app: fastapi.applications.FastAPI, stream_interpreter, qna_interpreter)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"create_process_qna_endpointqna_interpreter",children:"create_process_qna_endpoint(qna_interpreter)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"create_stream_qa_endpointstream_interpreter",children:"create_stream_qa_endpoint(stream_interpreter)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"register_qna_fastapi_routesapp-fastapiapplicationsfastapi-stream_interpreter-qna_interpreter-2",children:"register_qna_fastapi_routes(app: fastapi.applications.FastAPI, stream_interpreter, qna_interpreter)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsx)(n.h3,{id:"vacrequest",children:"VACRequest"}),"\n",(0,t.jsxs)(n.p,{children:["Usage docs: ",(0,t.jsx)(n.a,{href:"https://docs.pydantic.dev/2.7/concepts/models/",children:"https://docs.pydantic.dev/2.7/concepts/models/"})]}),"\n",(0,t.jsx)(n.p,{children:"A base class for creating Pydantic models."}),"\n",(0,t.jsxs)(n.p,{children:["Attributes:\n",(0,t.jsx)(n.strong,{children:"class_vars"}),": The names of classvars defined on the model.\n",(0,t.jsx)(n.strong,{children:"private_attributes"}),": Metadata about the private attributes of the model.\n",(0,t.jsx)(n.strong,{children:"signature"}),": The signature for instantiating the model."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pydantic_complete"}),": Whether model building is completed, or if there are still undefined fields.\n",(0,t.jsx)(n.strong,{children:"pydantic_core_schema"}),": The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n",(0,t.jsx)(n.strong,{children:"pydantic_custom_init"}),": Whether the model has a custom ",(0,t.jsx)(n.code,{children:"__init__"})," function.\n",(0,t.jsx)(n.strong,{children:"pydantic_decorators"}),": Metadata containing the decorators defined on the model.\nThis replaces ",(0,t.jsx)(n.code,{children:"Model.__validators__"})," and ",(0,t.jsx)(n.code,{children:"Model.__root_validators__"})," from Pydantic V1.\n",(0,t.jsx)(n.strong,{children:"pydantic_generic_metadata"}),": Metadata for generic models; contains data used for a similar purpose to\n",(0,t.jsx)(n.strong,{children:"args"}),", ",(0,t.jsx)(n.strong,{children:"origin"}),", ",(0,t.jsx)(n.strong,{children:"parameters"})," in typing-module generics. May eventually be replaced by these.\n",(0,t.jsx)(n.strong,{children:"pydantic_parent_namespace"}),": Parent namespace of the model, used for automatic rebuilding of models.\n",(0,t.jsx)(n.strong,{children:"pydantic_post_init"}),": The name of the post-init method for the model, if defined.\n",(0,t.jsx)(n.strong,{children:"pydantic_root_model"}),": Whether the model is a ",(0,t.jsx)(n.code,{children:"RootModel"}),".\n",(0,t.jsx)(n.strong,{children:"pydantic_serializer"}),": The pydantic-core SchemaSerializer used to dump instances of the model.\n",(0,t.jsx)(n.strong,{children:"pydantic_validator"}),": The pydantic-core SchemaValidator used to validate instances of the model."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pydantic_extra"}),": An instance attribute with the values of extra fields from validation when\n",(0,t.jsx)(n.code,{children:"model_config['extra'] == 'allow'"}),".\n",(0,t.jsx)(n.strong,{children:"pydantic_fields_set"}),": An instance attribute with the names of fields explicitly set.\n",(0,t.jsx)(n.strong,{children:"pydantic_private"}),": Instance attribute with the values of private attributes set on the model instance."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"copy"}),"(self: 'Model') -> 'Model'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a shallow copy of the model."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"deepcopy"}),"(self: 'Model', memo: 'dict[int, Any] | None' = None) -> 'Model'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a deep copy of the model."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"delattr"}),"(self, item: 'str') -> 'Any'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement delattr(self, name)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"eq"}),"(self, other: 'Any') -> 'bool'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Return self==value."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getattr"}),"(self, item: 'str') -> 'Any'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getstate"}),"(self) -> 'dict[Any, Any]'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Helper for pickle."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"init"}),"(self, /, **data: 'Any') -> 'None'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create a new model by parsing and validating input data from keyword arguments."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Raises [",(0,t.jsx)(n.code,{children:"ValidationError"}),"][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"self"})," is explicitly positional-only to allow ",(0,t.jsx)(n.code,{children:"self"})," as a field name."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"iter"}),"(self) -> 'TupleGenerator'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["So ",(0,t.jsx)(n.code,{children:"dict(model)"})," works."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pretty"}),"(self, fmt: 'typing.Callable[[Any], Any]', **kwargs: 'Any') -> 'typing.Generator[Any, None, None]'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Used by devtools (",(0,t.jsx)(n.a,{href:"https://python-devtools.helpmanual.io/",children:"https://python-devtools.helpmanual.io/"}),") to pretty print objects."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr"}),"(self) -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Return repr(self)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr_args"}),"(self) -> '_repr.ReprArgs'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr_name"}),"(self) -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Name of the instance's class, used in ",(0,t.jsx)(n.strong,{children:"repr"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr_str"}),"(self, join_str: 'str') -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"rich_repr"}),"(self) -> 'RichReprResult'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Used by Rich (",(0,t.jsx)(n.a,{href:"https://rich.readthedocs.io/en/stable/pretty.html",children:"https://rich.readthedocs.io/en/stable/pretty.html"}),") to pretty print objects."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"setattr"}),"(self, name: 'str', value: 'Any') -> 'None'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement setattr(self, name, value)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"setstate"}),"(self, state: 'dict[Any, Any]') -> 'None'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"str"}),"(self) -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Return str(self)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_calculate_keys(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_check_frozen(self, name: 'str', value: 'Any') -> 'None'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_copy_and_set_values(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_iter(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"copy(self: 'Model', *, include: 'AbstractSetIntStr | MappingIntStrAny | None' = None, exclude: 'AbstractSetIntStr | MappingIntStrAny | None' = None, update: 'typing.Dict[str, Any] | None' = None, deep: 'bool' = False) -> 'Model'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a copy of the model."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['!!! warning "Deprecated"\nThis method is now deprecated; use ',(0,t.jsx)(n.code,{children:"model_copy"})," instead."]}),"\n",(0,t.jsxs)(n.p,{children:["If you need ",(0,t.jsx)(n.code,{children:"include"})," or ",(0,t.jsx)(n.code,{children:"exclude"}),", use:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"data = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Args:\ninclude: Optional set or mapping specifying which fields to include in the copied model.\nexclude: Optional set or mapping specifying which fields to exclude in the copied model.\nupdate: Optional dictionary of field-value pairs to override field values in the copied model.\ndeep: If True, the values of fields that are Pydantic models will be deep-copied."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nA copy of the model with included, excluded and updated fields as specified."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"dict(self, *, include: 'IncEx' = None, exclude: 'IncEx' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False) -> 'typing.Dict[str, Any]'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"json(self, *, include: 'IncEx' = None, exclude: 'IncEx' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, encoder: 'typing.Callable[[Any], Any] | None' = PydanticUndefined, models_as_dict: 'bool' = PydanticUndefined, **dumps_kwargs: 'Any') -> 'str'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"model_copy(self: 'Model', *, update: 'dict[str, Any] | None' = None, deep: 'bool' = False) -> 'Model'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Usage docs: ",(0,t.jsx)(n.a,{href:"https://docs.pydantic.dev/2.7/concepts/serialization/#model_copy",children:"https://docs.pydantic.dev/2.7/concepts/serialization/#model_copy"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns a copy of the model."}),"\n",(0,t.jsxs)(n.p,{children:["Args:\nupdate: Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\ndeep: Set to ",(0,t.jsx)(n.code,{children:"True"})," to make a deep copy of the model."]}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nNew model instance."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["model_dump(self, *, mode: \"Literal['json', 'python'] | str\" = 'python', include: 'IncEx' = None, exclude: 'IncEx' = None, context: 'dict[str, Any] | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, serialize_as_any: 'bool' = False) -> 'dict[str, Any]'","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Usage docs: ",(0,t.jsx)(n.a,{href:"https://docs.pydantic.dev/2.7/concepts/serialization/#modelmodel_dump",children:"https://docs.pydantic.dev/2.7/concepts/serialization/#modelmodel_dump"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Generate a dictionary representation of the model, optionally specifying which fields to include or exclude."}),"\n",(0,t.jsxs)(n.p,{children:["Args:\nmode: The mode in which ",(0,t.jsx)(n.code,{children:"to_python"})," should run.\nIf mode is 'json', the output will only contain JSON serializable types.\nIf mode is 'python', the output may contain non-JSON-serializable Python objects.\ninclude: A set of fields to include in the output.\nexclude: A set of fields to exclude from the output.\ncontext: Additional context to pass to the serializer.\nby_alias: Whether to use the field's alias in the dictionary key if defined.\nexclude_unset: Whether to exclude fields that have not been explicitly set.\nexclude_defaults: Whether to exclude fields that are set to their default value.\nexclude_none: Whether to exclude fields that have a value of ",(0,t.jsx)(n.code,{children:"None"}),'.\nround_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\nwarnings: How to handle serialization errors. False/"none" ignores them, True/"warn" logs errors,\n"error" raises a [',(0,t.jsx)(n.code,{children:"PydanticSerializationError"}),"][pydantic_core.PydanticSerializationError].\nserialize_as_any: Whether to serialize fields with duck-typing serialization behavior."]}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nA dictionary representation of the model."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["model_dump_json(self, *, indent: 'int | None' = None, include: 'IncEx' = None, exclude: 'IncEx' = None, context: 'dict[str, Any] | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, serialize_as_any: 'bool' = False) -> 'str'","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Usage docs: ",(0,t.jsx)(n.a,{href:"https://docs.pydantic.dev/2.7/concepts/serialization/#modelmodel_dump_json",children:"https://docs.pydantic.dev/2.7/concepts/serialization/#modelmodel_dump_json"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Generates a JSON representation of the model using Pydantic's ",(0,t.jsx)(n.code,{children:"to_json"})," method."]}),"\n",(0,t.jsxs)(n.p,{children:["Args:\nindent: Indentation to use in the JSON output. If None is passed, the output will be compact.\ninclude: Field(s) to include in the JSON output.\nexclude: Field(s) to exclude from the JSON output.\ncontext: Additional context to pass to the serializer.\nby_alias: Whether to serialize using field aliases.\nexclude_unset: Whether to exclude fields that have not been explicitly set.\nexclude_defaults: Whether to exclude fields that are set to their default value.\nexclude_none: Whether to exclude fields that have a value of ",(0,t.jsx)(n.code,{children:"None"}),'.\nround_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\nwarnings: How to handle serialization errors. False/"none" ignores them, True/"warn" logs errors,\n"error" raises a [',(0,t.jsx)(n.code,{children:"PydanticSerializationError"}),"][pydantic_core.PydanticSerializationError].\nserialize_as_any: Whether to serialize fields with duck-typing serialization behavior."]}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nA JSON string representation of the model."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["model_post_init(self, _BaseModel__context: 'Any') -> 'None'","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Override this method to perform additional initialization after ",(0,t.jsx)(n.code,{children:"__init__"})," and ",(0,t.jsx)(n.code,{children:"model_construct"}),".\nThis is useful if you want to do some validation that requires the entire model to be initialized."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);