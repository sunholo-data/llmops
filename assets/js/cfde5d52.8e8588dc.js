"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9827],{8831:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(4848),s=t(8453);const a={},o="qna_routes.py",i={id:"sunholo/agents/flask/qna_routes",title:"qna_routes.py",description:"Source: sunholo/agents/flask/qnaroutes.py",source:"@site/docs/sunholo/agents/flask/qna_routes.md",sourceDirName:"sunholo/agents/flask",slug:"/sunholo/agents/flask/qna_routes",permalink:"/docs/sunholo/agents/flask/qna_routes",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/sunholo/agents/flask/qna_routes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"base.py",permalink:"/docs/sunholo/agents/flask/base"},next:{title:"vac_routes.py",permalink:"/docs/sunholo/agents/flask/vac_routes"}},l={},c=[{value:"Functions",id:"functions",level:2},{value:"register_qna_routes(app, stream_interpreter, vac_interpreter)",id:"register_qna_routesapp-stream_interpreter-vac_interpreter",level:3},{value:"create_langfuse_trace(request, vector_name)",id:"create_langfuse_tracerequest-vector_name",level:3},{value:"handle_file_upload(file, vector_name)",id:"handle_file_uploadfile-vector_name",level:3},{value:"make_openai_response(user_message, vector_name, answer)",id:"make_openai_responseuser_message-vector_name-answer",level:3},{value:"prep_vac(request, vector_name)",id:"prep_vacrequest-vector_name",level:3}];function p(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"qna_routespy",children:"qna_routes.py"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Source"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/sunholo/agents/flask/qna_routes.py",children:"sunholo/agents/flask/qna_routes.py"})]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"register_qna_routesapp-stream_interpreter-vac_interpreter",children:"register_qna_routes(app, stream_interpreter, vac_interpreter)"}),"\n",(0,r.jsx)(n.p,{children:"Register Q&A routes for a Flask application."}),"\n",(0,r.jsx)(n.p,{children:"This function sets up multiple routes for handling Q&A operations,\nincluding streaming responses and processing static responses."}),"\n",(0,r.jsx)(n.p,{children:"Args:\napp (Flask): The Flask application instance.\nstream_interpreter (function): Function to handle streaming Q&A responses.\nvac_interpreter (function): Function to handle static Q&A responses."}),"\n",(0,r.jsx)(n.p,{children:"Returns:\nNone"}),"\n",(0,r.jsxs)(n.p,{children:["Example:\nfrom flask import Flask\napp = Flask(",(0,r.jsx)(n.strong,{children:"name"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"def dummy_stream_interpreter(...):\n..."}),"\n",(0,r.jsx)(n.p,{children:"def dummy_vac_interpreter(...):\n..."}),"\n",(0,r.jsx)(n.p,{children:"register_qna_routes(app, dummy_stream_interpreter, dummy_vac_interpreter)"}),"\n",(0,r.jsx)(n.h3,{id:"create_langfuse_tracerequest-vector_name",children:"create_langfuse_trace(request, vector_name)"}),"\n",(0,r.jsx)(n.p,{children:"Create a Langfuse trace for tracking requests."}),"\n",(0,r.jsx)(n.p,{children:"This function initializes a Langfuse trace object based on the request headers\nand vector name."}),"\n",(0,r.jsx)(n.p,{children:"Args:\nrequest (Request): The Flask request object.\nvector_name (str): The name of the vector for the request."}),"\n",(0,r.jsx)(n.p,{children:"Returns:\nLangfuse.Trace: The Langfuse trace object."}),"\n",(0,r.jsx)(n.p,{children:'Example:\ntrace = create_langfuse_trace(request, "example_vector")'}),"\n",(0,r.jsx)(n.h3,{id:"handle_file_uploadfile-vector_name",children:"handle_file_upload(file, vector_name)"}),"\n",(0,r.jsx)(n.p,{children:"Handle file upload and store the file in Google Cloud Storage."}),"\n",(0,r.jsx)(n.p,{children:"This function saves the uploaded file locally, uploads it to Google Cloud Storage,\nand then removes the local copy."}),"\n",(0,r.jsx)(n.p,{children:"Args:\nfile (FileStorage): The uploaded file.\nvector_name (str): The name of the vector for the request."}),"\n",(0,r.jsx)(n.p,{children:"Returns:\ntuple: A tuple containing the URI of the uploaded file and its MIME type."}),"\n",(0,r.jsx)(n.p,{children:"Raises:\nException: If the file upload fails."}),"\n",(0,r.jsx)(n.p,{children:'Example:\nuri, mime_type = handle_file_upload(file, "example_vector")'}),"\n",(0,r.jsx)(n.h3,{id:"make_openai_responseuser_message-vector_name-answer",children:"make_openai_response(user_message, vector_name, answer)"}),"\n",(0,r.jsx)(n.p,{children:"No docstring available."}),"\n",(0,r.jsx)(n.h3,{id:"prep_vacrequest-vector_name",children:"prep_vac(request, vector_name)"}),"\n",(0,r.jsx)(n.p,{children:"Prepare the input data for a VAC request."}),"\n",(0,r.jsx)(n.p,{children:"This function processes the incoming request data, extracts relevant\ninformation, and prepares the data for VAC processing."}),"\n",(0,r.jsx)(n.p,{children:"Args:\nrequest (Request): The Flask request object.\nvector_name (str): The name of the vector for the request."}),"\n",(0,r.jsx)(n.p,{children:"Returns:\ndict: A dictionary containing prepared input data and metadata."}),"\n",(0,r.jsx)(n.p,{children:'Example:\nprep_data = prep_vac(request, "example_vector")'})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);