"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1294],{9055:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=s(4848),l=s(8453);const i={},t="vac_routes.py",a={id:"sunholo/agents/flask/vac_routes",title:"vac_routes.py",description:"Source: sunholo/agents/flask/vacroutes.py",source:"@site/docs/sunholo/agents/flask/vac_routes.md",sourceDirName:"sunholo/agents/flask",slug:"/sunholo/agents/flask/vac_routes",permalink:"/docs/sunholo/agents/flask/vac_routes",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/sunholo/agents/flask/vac_routes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"qna_routes.py",permalink:"/docs/sunholo/agents/flask/qna_routes"},next:{title:"langserve.py",permalink:"/docs/sunholo/agents/langserve"}},o={},c=[{value:"Classes",id:"classes",level:2},{value:"VACRoutes",id:"vacroutes",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"vac_routespy",children:"vac_routes.py"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Source"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/sunholo/agents/flask/vac_routes.py",children:"sunholo/agents/flask/vac_routes.py"})]}),"\n",(0,r.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsx)(n.h3,{id:"vacroutes",children:"VACRoutes"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from agents.flask import VACRoutes\n\napp = Flask(__name__)\n\ndef stream_interpreter(question, vector_name, chat_history, **kwargs):\n    # Implement your streaming logic\n    ...\n\ndef vac_interpreter(question, vector_name, chat_history, **kwargs):\n    # Implement your static VAC logic\n    ...\n\nvac_routes = VACRoutes(app, stream_interpreter, vac_interpreter)\n\nif __name__ == "__main__":\n    app.run(debug=True)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"init"}),"(self, app, stream_interpreter, vac_interpreter=None, additional_routes=None)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"_async_generator_to_stream(async_gen_func)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Helper function to stream the async generator's values to the client."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"check_authentication(self)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"create_langfuse_trace(self, request, vector_name, trace_id)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"handle_file_upload(self, file, vector_name)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"handle_openai_compatible_endpoint(self, vector_name=None)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"handle_options(self, **kwargs)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"handle_process_vac(self, vector_name)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"handle_stream_vac(self, vector_name)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"health(self)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"home(self)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"langfuse_eval_response(self, trace_id, eval_percent=0.01)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sends an evaluation message based on a probability defined by eval_percent."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Args:\neval_percent (float): The probability (0 to 1) of triggering the evaluation.\ntrace_id (str): The trace identifier for the evaluation."}),"\n",(0,r.jsx)(n.p,{children:"Returns:\nNone"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"make_openai_response(self, user_message, vector_name, answer)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"openai_health_endpoint()"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"prep_vac(self, request, vector_name)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"register_additional_routes(self)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Registers additional custom routes provided during initialization."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from flask import Flask, jsonify\nfrom agents.flask import VACRoutes\n\napp = Flask(__name__)\n\ndef stream_interpreter(question, vector_name, chat_history, **kwargs):\n    # Implement your streaming logic\n    ...\n\ndef vac_interpreter(question, vector_name, chat_history, **kwargs):\n    # Implement your static VAC logic\n    ...\n\ndef custom_handler():\n    return jsonify({"message": "Custom route!"})\n\ncustom_routes = [\n    {\n        "rule": "/custom",\n        "methods": ["GET"],\n        "handler": custom_handler\n    }\n]\n\nvac_routes = VACRoutes(app, stream_interpreter, vac_interpreter, additional_routes=custom_routes)\n\nif __name__ == "__main__":\n    app.run(debug=True)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"register_routes(self)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Registers all the VAC routes for the Flask application."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"vac_interpreter_default(self, question: str, vector_name: str, chat_history=[], **kwargs)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(6540);const l={},i=r.createContext(l);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);