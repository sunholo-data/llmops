"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4673],{1182:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var o=s(4848),t=s(8453);const i={},r="process_funcs_cls.py",c={id:"sunholo/genai/process_funcs_cls",title:"process_funcs_cls.py",description:"Source: sunholo/genai/processfuncscls.py",source:"@site/docs/sunholo/genai/process_funcs_cls.md",sourceDirName:"sunholo/genai",slug:"/sunholo/genai/process_funcs_cls",permalink:"/docs/sunholo/genai/process_funcs_cls",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/sunholo/genai/process_funcs_cls.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"metadata.py",permalink:"/docs/sunholo/gcs/metadata"},next:{title:"safety.py",permalink:"/docs/sunholo/genai/safety"}},l={},a=[{value:"Classes",id:"classes",level:2},{value:"GenAIFunctionProcessor",id:"genaifunctionprocessor",level:3}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"process_funcs_clspy",children:"process_funcs_cls.py"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"Source"}),": ",(0,o.jsx)(e.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/sunholo/genai/process_funcs_cls.py",children:"sunholo/genai/process_funcs_cls.py"})]}),"\n",(0,o.jsx)(e.h2,{id:"classes",children:"Classes"}),"\n",(0,o.jsx)(e.h3,{id:"genaifunctionprocessor",children:"GenAIFunctionProcessor"}),"\n",(0,o.jsx)(e.p,{children:"A generic class for processing function calls from google.generativeai function calling models."}),"\n",(0,o.jsxs)(e.p,{children:["This class provides a framework for handling multiple function calls in responses\nfrom generative AI systems. Users of this class should subclass it and provide\ntheir own implementation of the ",(0,o.jsx)(e.code,{children:"construct_tools"})," method, which returns a dictionary\nof function names mapped to their implementations."]}),"\n",(0,o.jsx)(e.p,{children:"Attributes:\nconfig (ConfigManager): Configuration manager instance. Reach values via self.config within your own construct_tools() method\nfuncs (dict): A dictionary of function names mapped to their implementations."}),"\n",(0,o.jsx)(e.p,{children:"Example usage:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'class AlloyDBFunctionProcessor(GenAIFunctionProcessor):\n    def construct_tools(self) -> dict:\n        pass\n\nconfig = ConfigManager()\nalloydb_processor = AlloyDBFunctionProcessor(config)\n\nresults = alloydb_processor.process_funcs(full_response)\n\nalloydb_model = alloydb_processor.get_model(\n    model_name="gemini-1.5-pro",\n    system_instruction="You are a helpful AlloyDB agent that helps users search and extract documents from the database."\n)\n'})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"init"}),"(self, config: sunholo.utils.config_class.ConfigManager)","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Initializes the GenAIFunctionProcessor with the given configuration."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Args:\nconfig (ConfigManager): The configuration manager instance."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["_validate_functions(self)","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Validates that all functions in the ",(0,o.jsx)(e.code,{children:"funcs"})," dictionary have docstrings."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["This method checks each function in the ",(0,o.jsx)(e.code,{children:"funcs"})," dictionary to ensure it has\na docstring. If a function is missing a docstring, an error is logged, and\na ",(0,o.jsx)(e.code,{children:"ValueError"})," is raised."]}),"\n",(0,o.jsx)(e.p,{children:"Raises:\nValueError: If any function is missing a docstring."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["construct_tools(self) -> dict","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Constructs a dictionary of tools (functions) specific to the application."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"This method should be overridden in subclasses to provide the specific\nfunction implementations required for the application."}),"\n",(0,o.jsx)(e.p,{children:"Returns:\ndict: A dictionary where keys are function names and values are function objects"}),"\n",(0,o.jsx)(e.p,{children:"Raises:\nNotImplementedError: If the method is not overridden in a subclass."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["get_model(self, system_instruction: str, generation_config=None, model_name: str = None)","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Constructs and returns the generative AI model configured with the tools."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["This method creates a generative AI model using the tools defined in the\n",(0,o.jsx)(e.code,{children:"funcs"})," dictionary and the provided configuration options."]}),"\n",(0,o.jsx)(e.p,{children:"Args:\nmodel_name (str): The name of the model to use.\nsystem_instruction (str): Instructions for the AI system.\ngeneration_config (dict, optional): Configuration for generation, such as temperature."}),"\n",(0,o.jsx)(e.p,{children:"Returns:\nGenerativeModel: An instance of the GenerativeModel configured with the provided tools."}),"\n",(0,o.jsx)(e.p,{children:"Example usage:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'alloydb_model = alloydb_processor.get_model(\n    model_name="gemini-1.5-pro",\n    system_instruction="You are a helpful AlloyDB agent that helps users search and extract documents from the database."\n)\n'})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["process_funcs(self, full_response, output_parts=True) -> Union[list['Part'], str]","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Processes the functions based on the full_response from the generative model."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["This method iterates through each part of the response, extracts function\ncalls and their parameters, and executes the corresponding functions defined\nin the ",(0,o.jsx)(e.code,{children:"funcs"})," dictionary."]}),"\n",(0,o.jsx)(e.p,{children:"Args:\nfull_response: The response object containing function calls.\noutput_parts (bool): Indicates whether to return structured parts or plain strings."}),"\n",(0,o.jsx)(e.p,{children:"Returns:\nlist[Part] | str: A list of Part objects or a formatted string with the results."}),"\n",(0,o.jsx)(e.p,{children:"Example usage:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"results = alloydb_processor.process_funcs(full_response)\n"})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>c});var o=s(6540);const t={},i=o.createContext(t);function r(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);