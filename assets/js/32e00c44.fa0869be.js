"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3516],{2494:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var s=l(4848),i=l(8453);const t={},r="loaders.py",d={id:"sunholo/chunker/loaders",title:"loaders.py",description:"Source: sunholo/chunker/loaders.py",source:"@site/docs/sunholo/chunker/loaders.md",sourceDirName:"sunholo/chunker",slug:"/sunholo/chunker/loaders",permalink:"/docs/sunholo/chunker/loaders",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/sunholo/chunker/loaders.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"images.py",permalink:"/docs/sunholo/chunker/images"},next:{title:"message_data.py",permalink:"/docs/sunholo/chunker/message_data"}},o={},c=[{value:"Functions",id:"functions",level:2},{value:"convert_to_txt(file_path)",id:"convert_to_txtfile_path",level:3},{value:"convert_to_txt_and_extract(gs_file, split=False)",id:"convert_to_txt_and_extractgs_file-splitfalse",level:3},{value:"ignore_files(filepath)",id:"ignore_filesfilepath",level:3},{value:"read_file_to_documents(gs_file: pathlib.Path, metadata: dict = None)",id:"read_file_to_documentsgs_file-pathlibpath-metadata-dict--none",level:3},{value:"read_gdrive_to_document(url: str, metadata: dict = None)",id:"read_gdrive_to_documenturl-str-metadata-dict--none",level:3},{value:"read_git_repo(clone_url, branch=&#39;main&#39;, metadata=None)",id:"read_git_repoclone_url-branchmain-metadatanone",level:3},{value:"read_url_to_document(url: str, metadata: dict = None)",id:"read_url_to_documenturl-str-metadata-dict--none",level:3},{value:"Classes",id:"classes",level:2},{value:"MyGoogleDriveLoader",id:"mygoogledriveloader",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"loaderspy",children:"loaders.py"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Source"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/sunholo/chunker/loaders.py",children:"sunholo/chunker/loaders.py"})]}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h3,{id:"convert_to_txtfile_path",children:"convert_to_txt(file_path)"}),"\n",(0,s.jsx)(n.p,{children:"No docstring available."}),"\n",(0,s.jsx)(n.h3,{id:"convert_to_txt_and_extractgs_file-splitfalse",children:"convert_to_txt_and_extract(gs_file, split=False)"}),"\n",(0,s.jsx)(n.p,{children:"No docstring available."}),"\n",(0,s.jsx)(n.h3,{id:"ignore_filesfilepath",children:"ignore_files(filepath)"}),"\n",(0,s.jsx)(n.p,{children:'Returns True if the given path\'s file extension is found within\nconfig.json "code_extensions" array\nReturns False if not'}),"\n",(0,s.jsx)(n.h3,{id:"read_file_to_documentsgs_file-pathlibpath-metadata-dict--none",children:"read_file_to_documents(gs_file: pathlib.Path, metadata: dict = None)"}),"\n",(0,s.jsx)(n.p,{children:"No docstring available."}),"\n",(0,s.jsx)(n.h3,{id:"read_gdrive_to_documenturl-str-metadata-dict--none",children:"read_gdrive_to_document(url: str, metadata: dict = None)"}),"\n",(0,s.jsx)(n.p,{children:"No docstring available."}),"\n",(0,s.jsx)(n.h3,{id:"read_git_repoclone_url-branchmain-metadatanone",children:"read_git_repo(clone_url, branch='main', metadata=None)"}),"\n",(0,s.jsx)(n.p,{children:"No docstring available."}),"\n",(0,s.jsx)(n.h3,{id:"read_url_to_documenturl-str-metadata-dict--none",children:"read_url_to_document(url: str, metadata: dict = None)"}),"\n",(0,s.jsx)(n.p,{children:"No docstring available."}),"\n",(0,s.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(n.h3,{id:"mygoogledriveloader",children:"MyGoogleDriveLoader"}),"\n",(0,s.jsx)(n.p,{children:".. deprecated:: 0.0.32 Use ``:class:`~langchain_google_community.GoogleDriveLoader``` instead."}),"\n",(0,s.jsxs)(n.p,{children:["Load Google Docs from ",(0,s.jsx)(n.code,{children:"Google Drive"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"copy"}),"(self) -> 'Self'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a shallow copy of the model."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"deepcopy"}),"(self, memo: 'dict[int, Any] | None' = None) -> 'Self'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a deep copy of the model."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"delattr"}),"(self, item: 'str') -> 'Any'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement delattr(self, name)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"eq"}),"(self, other: 'Any') -> 'bool'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Return self==value."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getattr"}),"(self, item: 'str') -> 'Any'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getstate"}),"(self) -> 'dict[Any, Any]'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Helper for pickle."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"init"}),"(self, url, *args, **kwargs)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create a new model by parsing and validating input data from keyword arguments."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Raises [",(0,s.jsx)(n.code,{children:"ValidationError"}),"][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"self"})," is explicitly positional-only to allow ",(0,s.jsx)(n.code,{children:"self"})," as a field name."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"iter"}),"(self) -> 'TupleGenerator'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["So ",(0,s.jsx)(n.code,{children:"dict(model)"})," works."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"pretty"}),"(self, fmt: 'typing.Callable[[Any], Any]', **kwargs: 'Any') -> 'typing.Generator[Any, None, None]'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Used by devtools (",(0,s.jsx)(n.a,{href:"https://python-devtools.helpmanual.io/",children:"https://python-devtools.helpmanual.io/"}),") to pretty print objects."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"repr"}),"(self) -> 'str'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Return repr(self)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"repr_args"}),"(self) -> '_repr.ReprArgs'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"repr_name"}),"(self) -> 'str'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Name of the instance's class, used in ",(0,s.jsx)(n.strong,{children:"repr"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"repr_str"}),"(self, join_str: 'str') -> 'str'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"rich_repr"}),"(self) -> 'RichReprResult'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Used by Rich (",(0,s.jsx)(n.a,{href:"https://rich.readthedocs.io/en/stable/pretty.html",children:"https://rich.readthedocs.io/en/stable/pretty.html"}),") to pretty print objects."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"setattr"}),"(self, name: 'str', value: 'Any') -> 'None'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement setattr(self, name, value)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"setstate"}),"(self, state: 'dict[Any, Any]') -> 'None'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"str"}),"(self) -> 'str'"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Return str(self)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_calculate_keys(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_check_frozen(self, name: 'str', value: 'Any') -> 'None'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_copy_and_set_values(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_extract_id(self, url)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_fetch_files_recursive(self, service: Any, folder_id: str) -> List[Dict[str, Union[str, List[str]]]]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fetch all files and subfolders recursively."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_iter(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_load_credentials(self) -> Any"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load credentials.\nThe order of loading credentials:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Service account key if file exists"}),"\n",(0,s.jsx)(n.li,{children:"Token path (for OAuth Client) if file exists"}),"\n",(0,s.jsx)(n.li,{children:"Credentials path (for OAuth Client) if file exists"}),"\n",(0,s.jsx)(n.li,{children:"Default credentials. if no credentials found, raise DefaultCredentialsError"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_load_document_from_id(self, id: str) -> langchain_core.documents.base.Document"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load a document from an ID."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_load_documents_from_folder(self, folder_id: str, *, file_types: Optional[Sequence[str]] = None) -> List[langchain_core.documents.base.Document]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load documents from a folder."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_load_documents_from_ids(self) -> List[langchain_core.documents.base.Document]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load documents from a list of IDs."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_load_file_from_id(self, id: str) -> List[langchain_core.documents.base.Document]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load a file from an ID."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_load_file_from_ids(self) -> List[langchain_core.documents.base.Document]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load files from a list of IDs."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"_load_sheet_from_id(self, id: str) -> List[langchain_core.documents.base.Document]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load a sheet and all tabs from an ID."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"alazy_load(self) -> 'AsyncIterator[Document]'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A lazy loader for Documents."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"aload(self) -> 'list[Document]'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load data into Document objects."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"copy(self, *, include: 'AbstractSetIntStr | MappingIntStrAny | None' = None, exclude: 'AbstractSetIntStr | MappingIntStrAny | None' = None, update: 'Dict[str, Any] | None' = None, deep: 'bool' = False) -> 'Self'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a copy of the model."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:['!!! warning "Deprecated"\nThis method is now deprecated; use ',(0,s.jsx)(n.code,{children:"model_copy"})," instead."]}),"\n",(0,s.jsxs)(n.p,{children:["If you need ",(0,s.jsx)(n.code,{children:"include"})," or ",(0,s.jsx)(n.code,{children:"exclude"}),", use:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"data = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Args:\ninclude: Optional set or mapping specifying which fields to include in the copied model.\nexclude: Optional set or mapping specifying which fields to exclude in the copied model.\nupdate: Optional dictionary of field-value pairs to override field values in the copied model.\ndeep: If True, the values of fields that are Pydantic models will be deep-copied."}),"\n",(0,s.jsx)(n.p,{children:"Returns:\nA copy of the model with included, excluded and updated fields as specified."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"dict(self, *, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False) -> 'Dict[str, Any]'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"json(self, *, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, encoder: 'Callable[[Any], Any] | None' = PydanticUndefined, models_as_dict: 'bool' = PydanticUndefined, **dumps_kwargs: 'Any') -> 'str'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"lazy_load(self) -> 'Iterator[Document]'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A lazy loader for Documents."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"load(self) -> List[langchain_core.documents.base.Document]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load documents."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"load_and_split(self, text_splitter: 'Optional[TextSplitter]' = None) -> 'list[Document]'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load Documents and split into chunks. Chunks are returned as Documents."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Do not override this method. It should be considered to be deprecated!"}),"\n",(0,s.jsx)(n.p,{children:"Args:\ntext_splitter: TextSplitter instance to use for splitting documents.\nDefaults to RecursiveCharacterTextSplitter."}),"\n",(0,s.jsx)(n.p,{children:"Returns:\nList of Documents."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"load_from_url(self, url: str)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"model_copy(self, *, update: 'dict[str, Any] | None' = None, deep: 'bool' = False) -> 'Self'"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Usage docs: ",(0,s.jsx)(n.a,{href:"https://docs.pydantic.dev/2.9/concepts/serialization/#model_copy",children:"https://docs.pydantic.dev/2.9/concepts/serialization/#model_copy"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Returns a copy of the model."}),"\n",(0,s.jsxs)(n.p,{children:["Args:\nupdate: Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\ndeep: Set to ",(0,s.jsx)(n.code,{children:"True"})," to make a deep copy of the model."]}),"\n",(0,s.jsx)(n.p,{children:"Returns:\nNew model instance."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["model_dump(self, *, mode: \"Literal['json', 'python'] | str\" = 'python', include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, context: 'Any | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, serialize_as_any: 'bool' = False) -> 'dict[str, Any]'","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Usage docs: ",(0,s.jsx)(n.a,{href:"https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump",children:"https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Generate a dictionary representation of the model, optionally specifying which fields to include or exclude."}),"\n",(0,s.jsxs)(n.p,{children:["Args:\nmode: The mode in which ",(0,s.jsx)(n.code,{children:"to_python"})," should run.\nIf mode is 'json', the output will only contain JSON serializable types.\nIf mode is 'python', the output may contain non-JSON-serializable Python objects.\ninclude: A set of fields to include in the output.\nexclude: A set of fields to exclude from the output.\ncontext: Additional context to pass to the serializer.\nby_alias: Whether to use the field's alias in the dictionary key if defined.\nexclude_unset: Whether to exclude fields that have not been explicitly set.\nexclude_defaults: Whether to exclude fields that are set to their default value.\nexclude_none: Whether to exclude fields that have a value of ",(0,s.jsx)(n.code,{children:"None"}),'.\nround_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\nwarnings: How to handle serialization errors. False/"none" ignores them, True/"warn" logs errors,\n"error" raises a [',(0,s.jsx)(n.code,{children:"PydanticSerializationError"}),"][pydantic_core.PydanticSerializationError].\nserialize_as_any: Whether to serialize fields with duck-typing serialization behavior."]}),"\n",(0,s.jsx)(n.p,{children:"Returns:\nA dictionary representation of the model."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["model_dump_json(self, *, indent: 'int | None' = None, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, context: 'Any | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, serialize_as_any: 'bool' = False) -> 'str'","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Usage docs: ",(0,s.jsx)(n.a,{href:"https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump_json",children:"https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump_json"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Generates a JSON representation of the model using Pydantic's ",(0,s.jsx)(n.code,{children:"to_json"})," method."]}),"\n",(0,s.jsxs)(n.p,{children:["Args:\nindent: Indentation to use in the JSON output. If None is passed, the output will be compact.\ninclude: Field(s) to include in the JSON output.\nexclude: Field(s) to exclude from the JSON output.\ncontext: Additional context to pass to the serializer.\nby_alias: Whether to serialize using field aliases.\nexclude_unset: Whether to exclude fields that have not been explicitly set.\nexclude_defaults: Whether to exclude fields that are set to their default value.\nexclude_none: Whether to exclude fields that have a value of ",(0,s.jsx)(n.code,{children:"None"}),'.\nround_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\nwarnings: How to handle serialization errors. False/"none" ignores them, True/"warn" logs errors,\n"error" raises a [',(0,s.jsx)(n.code,{children:"PydanticSerializationError"}),"][pydantic_core.PydanticSerializationError].\nserialize_as_any: Whether to serialize fields with duck-typing serialization behavior."]}),"\n",(0,s.jsx)(n.p,{children:"Returns:\nA JSON string representation of the model."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["model_post_init(self, _BaseModel__context: 'Any') -> 'None'","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Override this method to perform additional initialization after ",(0,s.jsx)(n.code,{children:"__init__"})," and ",(0,s.jsx)(n.code,{children:"model_construct"}),".\nThis is useful if you want to do some validation that requires the entire model to be initialized."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>d});var s=l(6540);const i={},t=s.createContext(i);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);